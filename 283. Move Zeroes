CODE :   
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        l = 0 
        for r in range(len(nums)):
            if nums[r]:
                nums[l], nums[r] = nums[r], nums[l]
                l += 1
        return nums 

EXPLANATION : 
🧠 Variable Meaning:
l: Left pointer – marks the position to place the next non-zero number.

r: Right pointer – iterates through the array to find non-zero numbers.

🔁 Loop Breakdown:
Loop through every element using r (right pointer).

If nums[r] is non-zero:

Swap nums[r] with nums[l].

Move l one step to the right.

This way, all non-zero numbers are moved to the left in the same order, and zeros get pushed to the right.

🔄 Dry Run:
Input: nums = [0, 1, 0, 3, 12]

r (index)	nums[r]	Action	nums after step	l
0	0	skip	[0, 1, 0, 3, 12]	0
1	1	swap nums[0] and nums[1] → 1,0	[1, 0, 0, 3, 12]	1
2	0	skip	[1, 0, 0, 3, 12]	1
3	3	swap nums[1] and nums[3] → 3,0	[1, 3, 0, 0, 12]	2
4	12	swap nums[2] and nums[4] → 12,0	[1, 3, 12, 0, 0]	3

Final result: [1, 3, 12, 0, 0]

🕒 Time and Space Complexity:
Time: O(n) — One pass through the array.

Space: O(1) — In-place, no extra space used.

🧾 Return Statement Note:
Even though the code has return nums, it's not required in LeetCode because the problem specifies to modify the list in-place and return None.

So the correct version in LeetCode submissions is:

python
Copy
Edit
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        l = 0 
        for r in range(len(nums)):
            if nums[r]:
                nums[l], nums[r] = nums[r], nums[l]
                l += 1
        # No return needed 
